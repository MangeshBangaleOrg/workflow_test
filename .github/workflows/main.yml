name: Auto merge PR and create tag
on:
  pull_request_review:
    types:
      - submitted
    branches:
      - master

jobs:
  approved:
    if: github.event.review.state == 'approved'
    runs-on: ubuntu-latest
    steps:
      - name: get PR title and number
        id: data
        run: |
          echo "This PR was approved"
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "GIT_TOKEN=${{ secrets.GIT_TOKEN }}" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v2


      - name: verify if previous tag is created or not
        id: get_tag
        run: |
          git config user.name "mangeshbangale27"
          git config user.email "mangeshbangale27@gmail.com"
          cat RELEASE.md
          TAG_NAME=$(cat RELEASE.md|  grep -oP 'v\d+\.\d+\.\d+' | head -n 1)
          if [ "$TAG_NAME" == "" ]; then
            echo "Could not read tag from RELEASE.md"
            exit 1
          fi
          response_code=$(curl -s -o /dev/null -w "%{http_code}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$TAG_NAME)
          if [ ! "$response_code" == "200" ]; then
            echo "Tag $TAG_NAME is not present."
            exit 1
          fi

      - name: read current tag from RELEASE.md
        id: get_tag
        run: |
            response=$(curl -H "Authorization: token ${{ steps.data.outputs.GIT_TOKEN }}" -H "Accept: application/vnd.github.v3.raw" "https://raw.githubusercontent.com/${{ github.repository }}/workflow/README.md")
            TAG_NAME=$(echo $response | grep -oP 'v\d+\.\d+\.\d+' | head -n 1)
            if [ $TAG_NAME == "" ]; then
              echo "could not read tag from release.md"
              exit 1
            fi
            echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Merge Pull Request and create tag
        id: pr_merge
        if: success()
        run: |
          echo "Pull request number is : ${{ steps.data.outputs.PR_NUMBER }} "
          echo " previous tag name is: $previous_tag_sha"
          response=$(curl -L \
          -X PUT \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ steps.data.outputs.GIT_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.data.outputs.PR_NUMBER }}/merge \
          -d '{"commit_title":"Expand enum","commit_message":"Add a new value to the merge_method enum","merge_method":"merge"}')
          sha=$(echo $response | grep -o '"sha": "[a-f0-9]\{40\}"' | grep -o '[a-f0-9]\{40\}')
          echo "commit_sha=$sha" >> $GITHUB_OUTPUT

      - name: create tag
        id: tag
        run: |
          # TAG_NAME="v$(echo ${{ steps.data.outputs.PR_TITLE }} | grep -oP '\d+\.\d+\.\d+')"
          curl -X POST -H "Authorization: token ${{ steps.data.outputs.GIT_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/git/refs \
          -d '{
          "ref": "refs/tags/${{ steps.get_tag.outputs.TAG_NAME }}",
          "sha": "${{ steps.pr_merge.outputs.commit_sha }}"
          }'
          # echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create-release
        if: success()
        run: |
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ steps.data.outputs.GIT_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d '{"tag_name":"${{ steps.get_tag.outputs.TAG_NAME }}","target_commithash":"${{ steps.pr_merge.outputs.commit_sha }}","name":"test-reease ${{ steps.get_tag.outputs.TAG_NAME }}","body":"Description of the release","draft":false,"prerelease":false,"generate_release_notes":true}'
